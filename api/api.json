{
	"className": [
		{
			"name": "Color",
			"filename": "color.js",
			"description": "Represents a color.",
			"member": [
				{
					"name": "new Color",
					"static": false,
					"role": "constructor",
					"description": "Creates a new color object",
					"argument": [
						{
							"name": "colorSpace",
							"optional": false,
							"type": "String|Object",
							"description": "Color space id or object"
						},
						{
							"name": "coords",
							"optional": false,
							"type": "Array",
							"description": "Color coordinates in its color space"
						},
						{
							"name": "alpha",
							"optional": true,
							"type": "Number"
						}
					]
				},
				{
					"name": "coords",
					"type": "Array",
					"static": false,
					"role": "property",
					"description": "Coordinates of the color in its color space",
					"argument": [
						{
							"optional": false
						}
					]
				},
				{
					"name": "alpha",
					"type": "Number",
					"static": false,
					"role": "property",
					"description": "Alpha transparency. Defaults to 1.",
					"argument": [
						{
							"optional": false
						}
					]
				},
				{
					"name": "space",
					"type": "Object",
					"static": false,
					"role": "accessor",
					"description": "Color space object for the current color.",
					"argument": [
						{
							"optional": false
						}
					]
				},
				{
					"name": "spaceId",
					"type": "String",
					"static": false,
					"role": "accessor",
					"description": "Color space id for the current color, e.g. \"srgb\". Can be used to set the color space, which also transforms the coords accordingly.",
					"argument": [
						{
							"optional": false
						}
					]
				},
				{
					"name": "white",
					"type": "Array",
					"static": false,
					"role": "accessor",
					"description": "White point of the color's color space. Equivalent to `this.space.white`. Defaults to `Color.whites.D50`.",
					"argument": [
						{
							"optional": false
						}
					]
				},
				{
					"name": "luminance",
					"static": false,
					"role": "function",
					"description": "Relative luminance.",
					"argument": [
						{
							"optional": false
						}
					],
					"returnType": "Number",
					"returnDescription": "The relative luminance of the color"
				},
				{
					"name": "deltaE",
					"static": false,
					"role": "function",
					"description": "DeltaE 1976 distance between the current color and another color",
					"argument": [
						{
							"name": "color",
							"optional": false,
							"type": "Color",
							"description": "The color to calculate DeltaE distance from."
						}
					],
					"returnType": "Number",
					"returnDescription": "Distance. 2.3 is the \"Just Noticeable Difference\""
				},
				{
					"name": "inGamut",
					"static": false,
					"role": "function",
					"description": "Is the color in gamut for a given color space?",
					"argument": [
						{
							"name": "options",
							"optional": true,
							"type": "Object",
							"description": "Options object. The options supported are:\n- **space**: The color space whose gamut we're checking against. Defaults to the current color space."
						}
					],
					"returnType": "Boolean"
				},
				{
					"name": "inGamut",
					"static": true,
					"role": "function",
					"description": "Is the color in gamut for a given color space?",
					"argument": [
						{
							"name": "color",
							"optional": false,
							"type": "Color|Object|String",
							"description": "Color"
						},
						{
							"name": "options",
							"optional": true,
							"type": "Object",
							"description": "Same as color.inGamut()"
						}
					],
					"returnType": "Boolean"
				},
				{
					"name": "toGamut",
					"static": false,
					"role": "function",
					"argument": [
						{
							"name": "options",
							"optional": true,
							"type": "Object",
							"description": "Options object. Options:\n- `method`: How to force into gamut. If \"clip\", coordinates are just clipped to their reference range (don't do that unless you have a reason, it produces very poor results). If in the form [colorSpaceId].[coordName], that coordinate is reduced until the color is in gamut. Please note that this may produce nonsensical results for certain coordinates (e.g. hue) or infinite loops if reducing the coordinate never brings the color in gamut. Defaults to `\"lch.chroma\"`.\n- `space`: Color space whose gamut we are mapping to. Defaults to the current color space.\n- `inPlace`: If true, modifies the current color instead of returning a new one. Defaults to false."
						}
					],
					"returnType": "Color",
					"description": "Map color to a color that is within a color space's gamut."
				},
				{
					"name": "toGamut",
					"static": true,
					"role": "function",
					"description": "Static version of color.toGamut()",
					"argument": [
						{
							"name": "color",
							"optional": false
						},
						{
							"name": "options",
							"optional": true,
							"type": "Object",
							"description": "Same as color.toGamut()"
						}
					],
					"returnType": "Color"
				},
				{
					"name": "to",
					"static": false,
					"role": "function",
					"description": "Convert the color to another color space and return the result as a new color.\nNote that you don't need this to convert the current color to another color space, just set [Color#spaceId](#Color#spaceId) or [Color#space](#Color#space).",
					"argument": [
						{
							"name": "space",
							"optional": false,
							"description": "Color space to convert to."
						},
						{
							"name": "options",
							"optional": true,
							"type": "Object",
							"description": "Options object.\n- `inGamut`: Whether to also force the coordinates of the new color to be in gamut of its color space"
						}
					]
				},
				{
					"name": "range",
					"static": false,
					"role": "function",
					"description": "Interpolate to another color and return a function that takes a 0-1 percentage and returns a color in the range.",
					"argument": [
						{
							"name": "color",
							"optional": false,
							"type": "Color",
							"description": "Color to interpolate to."
						},
						{
							"name": "options",
							"optional": true,
							"type": "Object",
							"description": "Options object.\n- `space`\n- `outputSpace`"
						}
					],
					"returnType": "Function"
				},
				{
					"name": "mix",
					"static": false,
					"role": "function",
					"description": "Return an intermediate color between two colors",
					"argument": [
						{
							"name": "color",
							"optional": false,
							"type": "Color"
						},
						{
							"name": "p",
							"optional": true,
							"type": "Number"
						},
						{
							"name": "options",
							"optional": true,
							"type": "Object",
							"description": "Options object.\n- `space`\n- `outputSpace`"
						}
					],
					"returnType": "Color"
				},
				{
					"name": "steps",
					"static": false,
					"role": "function",
					"description": "Interpolate to another color and return an array of colors",
					"argument": [
						{
							"name": "color",
							"optional": false,
							"type": "Color"
						},
						{
							"name": "options",
							"optional": true,
							"type": "Object",
							"description": "- space, \n- outputSpace, \n- delta, \n- steps = 2, \n- maxSteps = 1000"
						}
					],
					"returnType": "Array",
					"returnDescription": "Array of colors"
				}
			]
		}
	]
}